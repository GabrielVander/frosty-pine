// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:frosty_pine/adapters/presenters/flutter_presenter.dart';
import 'package:frosty_pine/adapters/presenters/models/brand_display_model.dart';
import 'package:frosty_pine/adapters/translations/add_new_brand_use_case_wrapper.dart';
import 'package:frosty_pine/adapters/translations/mirrors.dart';
import 'package:frosty_pine/adapters/translations/rust_factory.dart';
import 'package:frosty_pine/frb_generated.dart';
import 'package:frosty_pine/frb_generated.io.dart' if (dart.library.js_interop) 'frb_generated.web.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  RustLib._();
  @internal
  static final instance = RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({RustLibApi? api, BaseHandler? handler, ExternalLibrary? externalLibrary}) async {
    await instance.initImpl(api: api, handler: handler, externalLibrary: externalLibrary);
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor => RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor => RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateAdaptersTranslationsEntryInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig => kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => 1128192314;

  static const kDefaultExternalLibraryLoaderConfig = ExternalLibraryLoaderConfig(
    stem: 'rust_lib_frosy_pine',
    ioDirectory: 'target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<Brand> crateAdaptersTranslationsAddNewBrandUseCaseWrapperAddNewBrandUseCaseWrapperExecute({
    required AddNewBrandUseCaseWrapper that,
    required String name,
  });

  Future<AddNewBrandUseCaseWrapper> crateAdaptersTranslationsAddNewBrandUseCaseWrapperAddNewBrandUseCaseWrapperNew({
    required ArcBrandRepository brandRepository,
  });

  Future<BrandDisplayModel> crateAdaptersPresentersFlutterPresenterBrandFlutterPresenterAddNewBrand({
    required BrandFlutterPresenter that,
    required String name,
  });

  Future<BrandFlutterPresenter> crateAdaptersPresentersFlutterPresenterBrandFlutterPresenterNew({required AddNewBrandUseCase addNewBrandUseCase});

  Future<void> crateAdaptersTranslationsEntryInitApp();

  Future<ArcBrandRepository> crateAdaptersTranslationsRustFactoryRustFactoryBrandRepositoryInMemoryImpl({required List<Brand> initialData});

  Future<RetrieveAllBrandsUseCase> crateAdaptersTranslationsRustFactoryRustFactoryRetrieveAllBrandsUseCase({required ArcBrandRepository brandRepository});

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AddNewBrandUseCase;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AddNewBrandUseCase;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AddNewBrandUseCasePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ArcBrandRepository;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ArcBrandRepository;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ArcBrandRepositoryPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_RetrieveAllBrandsUseCase;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_RetrieveAllBrandsUseCase;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_RetrieveAllBrandsUseCasePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AddNewBrandUseCaseError;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AddNewBrandUseCaseError;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AddNewBrandUseCaseErrorPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AddNewBrandUseCaseWrapper;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AddNewBrandUseCaseWrapper;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AddNewBrandUseCaseWrapperPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({required super.handler, required super.wire, required super.generalizedFrbRustBinding, required super.portManager});

  @override
  Future<Brand> crateAdaptersTranslationsAddNewBrandUseCaseWrapperAddNewBrandUseCaseWrapperExecute({
    required AddNewBrandUseCaseWrapper that,
    required String name,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddNewBrandUseCaseWrapper(that, serializer);
          sse_encode_String(name, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_brand,
          decodeErrorData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddNewBrandUseCaseError,
        ),
        constMeta: kCrateAdaptersTranslationsAddNewBrandUseCaseWrapperAddNewBrandUseCaseWrapperExecuteConstMeta,
        argValues: [that, name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAdaptersTranslationsAddNewBrandUseCaseWrapperAddNewBrandUseCaseWrapperExecuteConstMeta =>
      const TaskConstMeta(debugName: 'AddNewBrandUseCaseWrapper_execute', argNames: ['that', 'name']);

  @override
  Future<AddNewBrandUseCaseWrapper> crateAdaptersTranslationsAddNewBrandUseCaseWrapperAddNewBrandUseCaseWrapperNew({
    required ArcBrandRepository brandRepository,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_RustOpaque_ArcdynBrandRepository(brandRepository, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddNewBrandUseCaseWrapper,
          decodeErrorData: null,
        ),
        constMeta: kCrateAdaptersTranslationsAddNewBrandUseCaseWrapperAddNewBrandUseCaseWrapperNewConstMeta,
        argValues: [brandRepository],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAdaptersTranslationsAddNewBrandUseCaseWrapperAddNewBrandUseCaseWrapperNewConstMeta =>
      const TaskConstMeta(debugName: 'AddNewBrandUseCaseWrapper_new', argNames: ['brandRepository']);

  @override
  Future<BrandDisplayModel> crateAdaptersPresentersFlutterPresenterBrandFlutterPresenterAddNewBrand({
    required BrandFlutterPresenter that,
    required String name,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_brand_flutter_presenter(that, serializer);
          sse_encode_String(name, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3, port: port_);
        },
        codec: SseCodec(decodeSuccessData: sse_decode_brand_display_model, decodeErrorData: sse_decode_String),
        constMeta: kCrateAdaptersPresentersFlutterPresenterBrandFlutterPresenterAddNewBrandConstMeta,
        argValues: [that, name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAdaptersPresentersFlutterPresenterBrandFlutterPresenterAddNewBrandConstMeta =>
      const TaskConstMeta(debugName: 'brand_flutter_presenter_add_new_brand', argNames: ['that', 'name']);

  @override
  Future<BrandFlutterPresenter> crateAdaptersPresentersFlutterPresenterBrandFlutterPresenterNew({required AddNewBrandUseCase addNewBrandUseCase}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_RustOpaque_AddNewBrandUseCase(addNewBrandUseCase, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4, port: port_);
        },
        codec: SseCodec(decodeSuccessData: sse_decode_brand_flutter_presenter, decodeErrorData: null),
        constMeta: kCrateAdaptersPresentersFlutterPresenterBrandFlutterPresenterNewConstMeta,
        argValues: [addNewBrandUseCase],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAdaptersPresentersFlutterPresenterBrandFlutterPresenterNewConstMeta =>
      const TaskConstMeta(debugName: 'brand_flutter_presenter_new', argNames: ['addNewBrandUseCase']);

  @override
  Future<void> crateAdaptersTranslationsEntryInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5, port: port_);
        },
        codec: SseCodec(decodeSuccessData: sse_decode_unit, decodeErrorData: null),
        constMeta: kCrateAdaptersTranslationsEntryInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAdaptersTranslationsEntryInitAppConstMeta => const TaskConstMeta(debugName: 'init_app', argNames: []);

  @override
  Future<ArcBrandRepository> crateAdaptersTranslationsRustFactoryRustFactoryBrandRepositoryInMemoryImpl({required List<Brand> initialData}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_brand(initialData, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6, port: port_);
        },
        codec: SseCodec(decodeSuccessData: sse_decode_RustOpaque_ArcdynBrandRepository, decodeErrorData: null),
        constMeta: kCrateAdaptersTranslationsRustFactoryRustFactoryBrandRepositoryInMemoryImplConstMeta,
        argValues: [initialData],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAdaptersTranslationsRustFactoryRustFactoryBrandRepositoryInMemoryImplConstMeta =>
      const TaskConstMeta(debugName: 'rust_factory_brand_repository_in_memory_impl', argNames: ['initialData']);

  @override
  Future<RetrieveAllBrandsUseCase> crateAdaptersTranslationsRustFactoryRustFactoryRetrieveAllBrandsUseCase({required ArcBrandRepository brandRepository}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_RustOpaque_ArcdynBrandRepository(brandRepository, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7, port: port_);
        },
        codec: SseCodec(decodeSuccessData: sse_decode_RustOpaque_RetrieveAllBrandsUseCase, decodeErrorData: null),
        constMeta: kCrateAdaptersTranslationsRustFactoryRustFactoryRetrieveAllBrandsUseCaseConstMeta,
        argValues: [brandRepository],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAdaptersTranslationsRustFactoryRustFactoryRetrieveAllBrandsUseCaseConstMeta =>
      const TaskConstMeta(debugName: 'rust_factory_retrieve_all_brands_use_case', argNames: ['brandRepository']);

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AddNewBrandUseCase =>
      wire.rust_arc_increment_strong_count_RustOpaque_AddNewBrandUseCase;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AddNewBrandUseCase =>
      wire.rust_arc_decrement_strong_count_RustOpaque_AddNewBrandUseCase;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ArcBrandRepository =>
      wire.rust_arc_increment_strong_count_RustOpaque_ArcdynBrandRepository;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ArcBrandRepository =>
      wire.rust_arc_decrement_strong_count_RustOpaque_ArcdynBrandRepository;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_RetrieveAllBrandsUseCase =>
      wire.rust_arc_increment_strong_count_RustOpaque_RetrieveAllBrandsUseCase;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_RetrieveAllBrandsUseCase =>
      wire.rust_arc_decrement_strong_count_RustOpaque_RetrieveAllBrandsUseCase;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AddNewBrandUseCaseError =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddNewBrandUseCaseError;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AddNewBrandUseCaseError =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddNewBrandUseCaseError;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AddNewBrandUseCaseWrapper =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddNewBrandUseCaseWrapper;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AddNewBrandUseCaseWrapper =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddNewBrandUseCaseWrapper;

  @protected
  AddNewBrandUseCaseError dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddNewBrandUseCaseError(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AddNewBrandUseCaseErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AddNewBrandUseCaseWrapper dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddNewBrandUseCaseWrapper(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AddNewBrandUseCaseWrapperImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AddNewBrandUseCaseWrapper dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddNewBrandUseCaseWrapper(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AddNewBrandUseCaseWrapperImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AddNewBrandUseCase dco_decode_RustOpaque_AddNewBrandUseCase(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AddNewBrandUseCaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcBrandRepository dco_decode_RustOpaque_ArcdynBrandRepository(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcBrandRepositoryImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RetrieveAllBrandsUseCase dco_decode_RustOpaque_RetrieveAllBrandsUseCase(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RetrieveAllBrandsUseCaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AddNewBrandUseCaseError dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddNewBrandUseCaseError(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AddNewBrandUseCaseErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AddNewBrandUseCaseWrapper dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddNewBrandUseCaseWrapper(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AddNewBrandUseCaseWrapperImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  BrandFlutterPresenter dco_decode_box_autoadd_brand_flutter_presenter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_brand_flutter_presenter(raw);
  }

  @protected
  Brand dco_decode_brand(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Brand(name: dco_decode_String(arr[0]));
  }

  @protected
  BrandDisplayModel dco_decode_brand_display_model(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BrandDisplayModel(name: dco_decode_String(arr[0]));
  }

  @protected
  BrandFlutterPresenter dco_decode_brand_flutter_presenter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BrandFlutterPresenter(addNewBrandUseCase: dco_decode_RustOpaque_AddNewBrandUseCase(arr[0]));
  }

  @protected
  List<Brand> dco_decode_list_brand(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_brand).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  RustFactory dco_decode_rust_factory(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.isNotEmpty) throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return const RustFactory();
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AddNewBrandUseCaseError sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddNewBrandUseCaseError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AddNewBrandUseCaseErrorImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AddNewBrandUseCaseWrapper sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddNewBrandUseCaseWrapper(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AddNewBrandUseCaseWrapperImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AddNewBrandUseCaseWrapper sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddNewBrandUseCaseWrapper(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AddNewBrandUseCaseWrapperImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AddNewBrandUseCase sse_decode_RustOpaque_AddNewBrandUseCase(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AddNewBrandUseCaseImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcBrandRepository sse_decode_RustOpaque_ArcdynBrandRepository(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcBrandRepositoryImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RetrieveAllBrandsUseCase sse_decode_RustOpaque_RetrieveAllBrandsUseCase(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RetrieveAllBrandsUseCaseImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AddNewBrandUseCaseError sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddNewBrandUseCaseError(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AddNewBrandUseCaseErrorImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AddNewBrandUseCaseWrapper sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddNewBrandUseCaseWrapper(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AddNewBrandUseCaseWrapperImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  BrandFlutterPresenter sse_decode_box_autoadd_brand_flutter_presenter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return sse_decode_brand_flutter_presenter(deserializer);
  }

  @protected
  Brand sse_decode_brand(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_name = sse_decode_String(deserializer);
    return Brand(name: var_name);
  }

  @protected
  BrandDisplayModel sse_decode_brand_display_model(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_name = sse_decode_String(deserializer);
    return BrandDisplayModel(name: var_name);
  }

  @protected
  BrandFlutterPresenter sse_decode_brand_flutter_presenter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_addNewBrandUseCase = sse_decode_RustOpaque_AddNewBrandUseCase(deserializer);
    return BrandFlutterPresenter(addNewBrandUseCase: var_addNewBrandUseCase);
  }

  @protected
  List<Brand> sse_decode_list_brand(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <Brand>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_brand(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  RustFactory sse_decode_rust_factory(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return const RustFactory();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddNewBrandUseCaseError(
    AddNewBrandUseCaseError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as AddNewBrandUseCaseErrorImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddNewBrandUseCaseWrapper(
    AddNewBrandUseCaseWrapper self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as AddNewBrandUseCaseWrapperImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddNewBrandUseCaseWrapper(
    AddNewBrandUseCaseWrapper self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as AddNewBrandUseCaseWrapperImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_RustOpaque_AddNewBrandUseCase(AddNewBrandUseCase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as AddNewBrandUseCaseImpl).frbInternalSseEncode(), serializer);
  }

  @protected
  void sse_encode_RustOpaque_ArcdynBrandRepository(ArcBrandRepository self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as ArcBrandRepositoryImpl).frbInternalSseEncode(), serializer);
  }

  @protected
  void sse_encode_RustOpaque_RetrieveAllBrandsUseCase(RetrieveAllBrandsUseCase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as RetrieveAllBrandsUseCaseImpl).frbInternalSseEncode(), serializer);
  }

  @protected
  void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddNewBrandUseCaseError(
    AddNewBrandUseCaseError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as AddNewBrandUseCaseErrorImpl).frbInternalSseEncode(), serializer);
  }

  @protected
  void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddNewBrandUseCaseWrapper(
    AddNewBrandUseCaseWrapper self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as AddNewBrandUseCaseWrapperImpl).frbInternalSseEncode(), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_box_autoadd_brand_flutter_presenter(BrandFlutterPresenter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_brand_flutter_presenter(self, serializer);
  }

  @protected
  void sse_encode_brand(Brand self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
  }

  @protected
  void sse_encode_brand_display_model(BrandDisplayModel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
  }

  @protected
  void sse_encode_brand_flutter_presenter(BrandFlutterPresenter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_AddNewBrandUseCase(self.addNewBrandUseCase, serializer);
  }

  @protected
  void sse_encode_list_brand(List<Brand> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_brand(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_rust_factory(RustFactory self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}

@sealed
class AddNewBrandUseCaseErrorImpl extends RustOpaque implements AddNewBrandUseCaseError {
  // Not to be used by end users
  AddNewBrandUseCaseErrorImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AddNewBrandUseCaseErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_AddNewBrandUseCaseError,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_AddNewBrandUseCaseError,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_AddNewBrandUseCaseErrorPtr,
  );
}

@sealed
class AddNewBrandUseCaseImpl extends RustOpaque implements AddNewBrandUseCase {
  // Not to be used by end users
  AddNewBrandUseCaseImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AddNewBrandUseCaseImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_AddNewBrandUseCase,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_AddNewBrandUseCase,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_AddNewBrandUseCasePtr,
  );
}

@sealed
class AddNewBrandUseCaseWrapperImpl extends RustOpaque implements AddNewBrandUseCaseWrapper {
  // Not to be used by end users
  AddNewBrandUseCaseWrapperImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AddNewBrandUseCaseWrapperImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_AddNewBrandUseCaseWrapper,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_AddNewBrandUseCaseWrapper,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_AddNewBrandUseCaseWrapperPtr,
  );

  Future<Brand> execute({required String name}) =>
      RustLib.instance.api.crateAdaptersTranslationsAddNewBrandUseCaseWrapperAddNewBrandUseCaseWrapperExecute(that: this, name: name);
}

@sealed
class ArcBrandRepositoryImpl extends RustOpaque implements ArcBrandRepository {
  // Not to be used by end users
  ArcBrandRepositoryImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArcBrandRepositoryImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_ArcBrandRepository,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_ArcBrandRepository,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_ArcBrandRepositoryPtr,
  );
}

@sealed
class RetrieveAllBrandsUseCaseImpl extends RustOpaque implements RetrieveAllBrandsUseCase {
  // Not to be used by end users
  RetrieveAllBrandsUseCaseImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RetrieveAllBrandsUseCaseImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_RetrieveAllBrandsUseCase,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_RetrieveAllBrandsUseCase,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_RetrieveAllBrandsUseCasePtr,
  );
}

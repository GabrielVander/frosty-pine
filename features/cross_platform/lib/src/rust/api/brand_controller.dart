// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:frosy_pine/src/rust/frb_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `from`, `from`

Future<ArcBrandRepository> createBrandRepositoryInMemoryImpl({
  required List<Brand> initialData,
}) => RustLib.instance.api
    .crateApiBrandControllerCreateBrandRepositoryInMemoryImpl(
      initialData: initialData,
    );

Future<AddNewBrandUseCase> createInMemoryAddNewBrandUseCase({
  required ArcBrandRepository brandRepository,
}) => RustLib.instance.api
    .crateApiBrandControllerCreateInMemoryAddNewBrandUseCase(
      brandRepository: brandRepository,
    );

Future<RetrieveAllBrandsUseCase> createInMemoryRetrieveAllBrandsUseCase({
  required ArcBrandRepository brandRepository,
}) => RustLib.instance.api
    .crateApiBrandControllerCreateInMemoryRetrieveAllBrandsUseCase(
      brandRepository: brandRepository,
    );

// Rust type: RustOpaqueMoi<AddNewBrandUseCase>
abstract class AddNewBrandUseCase implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<Arc < dyn BrandRepository >>
abstract class ArcBrandRepository implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<RetrieveAllBrandsUseCase>
abstract class RetrieveAllBrandsUseCase implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Brand>>
abstract class Brand implements RustOpaqueInterface {}

class BrandModel {
  const BrandModel({required this.name});
  final String name;

  @override
  int get hashCode => name.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is BrandModel &&
          runtimeType == other.runtimeType &&
          name == other.name;
}

class BrandsController {
  factory BrandsController({
    required AddNewBrandUseCase addNewBrandUseCase,
    required RetrieveAllBrandsUseCase retrieveAllBrandsUseCase,
  }) => RustLib.instance.api.crateApiBrandControllerBrandsControllerNew(
    addNewBrandUseCase: addNewBrandUseCase,
    retrieveAllBrandsUseCase: retrieveAllBrandsUseCase,
  );

  const BrandsController.raw({
    required this.addNewBrandUseCase,
    required this.retrieveAllBrandsUseCase,
  });
  final AddNewBrandUseCase addNewBrandUseCase;
  final RetrieveAllBrandsUseCase retrieveAllBrandsUseCase;

  Future<BrandModel> addNewBrand({required String name}) =>
      RustLib.instance.api.crateApiBrandControllerBrandsControllerAddNewBrand(
        that: this,
        name: name,
      );

  Future<List<BrandModel>> retrieveAllBrands() => RustLib.instance.api
      .crateApiBrandControllerBrandsControllerRetrieveAllBrands(that: this);

  @override
  int get hashCode =>
      addNewBrandUseCase.hashCode ^ retrieveAllBrandsUseCase.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is BrandsController &&
          runtimeType == other.runtimeType &&
          addNewBrandUseCase == other.addNewBrandUseCase &&
          retrieveAllBrandsUseCase == other.retrieveAllBrandsUseCase;
}

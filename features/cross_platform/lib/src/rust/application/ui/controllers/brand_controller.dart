// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:frosy_pine/src/rust/application/ui/models/brand_model.dart';
import 'package:frosy_pine/src/rust/frb_generated.dart';

// Rust type: RustOpaqueMoi<AddNewBrandUseCase>
abstract class AddNewBrandUseCase implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<RetrieveAllBrandsUseCase>
abstract class RetrieveAllBrandsUseCase implements RustOpaqueInterface {}

class BrandsController {
  factory BrandsController({
    required AddNewBrandUseCase addNewBrandUseCase,
    required RetrieveAllBrandsUseCase retrieveAllBrandsUseCase,
  }) => RustLib.instance.api
      .crateApplicationUiControllersBrandControllerBrandsControllerNew(
        addNewBrandUseCase: addNewBrandUseCase,
        retrieveAllBrandsUseCase: retrieveAllBrandsUseCase,
      );

  const BrandsController.raw({
    required this.addNewBrandUseCase,
    required this.retrieveAllBrandsUseCase,
  });
  final AddNewBrandUseCase addNewBrandUseCase;
  final RetrieveAllBrandsUseCase retrieveAllBrandsUseCase;

  Future<BrandModel> addNewBrand({required String name}) => RustLib.instance.api
      .crateApplicationUiControllersBrandControllerBrandsControllerAddNewBrand(
        that: this,
        name: name,
      );

  Future<List<BrandModel>> retrieveAllBrands() => RustLib.instance.api
      .crateApplicationUiControllersBrandControllerBrandsControllerRetrieveAllBrands(
        that: this,
      );

  @override
  int get hashCode =>
      addNewBrandUseCase.hashCode ^ retrieveAllBrandsUseCase.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is BrandsController &&
          runtimeType == other.runtimeType &&
          addNewBrandUseCase == other.addNewBrandUseCase &&
          retrieveAllBrandsUseCase == other.retrieveAllBrandsUseCase;
}
